name: Manual Deploy to Droplet

on:
  workflow_dispatch:
    inputs:
      branch_to_deploy:
        description: 'The branch name whose latest commit image you want to deploy. Example: main, develop, feature/xyz'
        required: true
        type: string
        default: 'main' # Hoặc bạn có thể để trống và bắt buộc nhập

jobs:
  manual_deploy:
    runs-on: ubuntu-latest
    environment: production # Optional: if you have a GitHub environment configured
    steps:
      - name: Checkout the specified branch
        uses: actions/checkout@v4
        with:
          # Checkout nhánh được chỉ định từ input để github.sha trỏ đến commit mới nhất của nhánh đó
          ref: ${{ github.event.inputs.branch_to_deploy }}

      - name: Deploy to DigitalOcean Droplet (Manual Trigger)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_DROPLET_HOST }}
          username: root
          password: ${{ secrets.DO_DROPLET_PASSWORD }}
          port: ${{ secrets.DO_SSH_PORT || 22 }}
          script: |
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            OWNER_LOWERCASE=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
            # github.sha bây giờ là SHA của commit mới nhất trên nhánh đã checkout (branch_to_deploy)
            IMAGE_SHA="${{ github.sha }}" 
            IMAGE_NAME="ghcr.io/${OWNER_LOWERCASE}/caroaiapp:${IMAGE_SHA}"
            CONTAINER_NAME="caro-ai-server-container"

            echo "Manually deploying image for branch '${{ github.event.inputs.branch_to_deploy }}' (SHA: $IMAGE_SHA) to Droplet"

            # Pull the specified Docker image
            docker pull $IMAGE_NAME

            # Stop and remove the existing container if it's running
            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
                docker stop $CONTAINER_NAME
            fi
            if [ "$(docker ps -aq -f name=$CONTAINER_NAME)" ]; then
                docker rm $CONTAINER_NAME
            fi

            # Run the new container
            docker run -d --restart always \
              -p 127.0.0.1:8080:8080 \
              --name $CONTAINER_NAME \
              -e ASPNETCORE_ENVIRONMENT=Production \
              -e ASPNETCORE_URLS="http://+:8080" \
              -e ConnectionStrings__DefaultConnection='${{ secrets.DB_CONNECTION_STRING }}' \
              -e AppSettings__ApiKey='${{ secrets.API_KEY }}' \
              $IMAGE_NAME 